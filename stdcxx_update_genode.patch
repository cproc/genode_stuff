stdcxx_update_genode.patch

From: Christian Prochaska <christian.prochaska@genode-labs.com>

This patch is needed to generate the 'c++config.h' file when updating the
stdcxx library. See 'repos/libports/include/stdcxx/README for more details'.
---
 repos/ports/src/noux-pkg/gcc/patches/series        |    1 
 .../src/noux-pkg/gcc/patches/stdcxx_update.patch   |   66 ++++++++++++++++++++
 repos/ports/src/noux-pkg/gcc/target.inc            |    4 +
 3 files changed, 70 insertions(+), 1 deletion(-)
 create mode 100644 repos/ports/src/noux-pkg/gcc/patches/stdcxx_update.patch

diff --git a/repos/ports/src/noux-pkg/gcc/patches/series b/repos/ports/src/noux-pkg/gcc/patches/series
index c2e3c2294e..3349fc80f7 100644
--- a/repos/ports/src/noux-pkg/gcc/patches/series
+++ b/repos/ports/src/noux-pkg/gcc/patches/series
@@ -17,3 +17,4 @@ emutls.patch
 frame_pointer.patch
 gcov.patch
 libcody.patch
+stdcxx_update.patch
diff --git a/repos/ports/src/noux-pkg/gcc/patches/stdcxx_update.patch b/repos/ports/src/noux-pkg/gcc/patches/stdcxx_update.patch
new file mode 100644
index 0000000000..87efb374b4
--- /dev/null
+++ b/repos/ports/src/noux-pkg/gcc/patches/stdcxx_update.patch
@@ -0,0 +1,66 @@
+stdcxx_update.patch
+
+From: Christian Prochaska <christian.prochaska@genode-labs.com>
+
+
+---
+ Makefile.tpl              |    1 +
+ configure.ac              |    2 ++
+ libstdc++-v3/acinclude.m4 |   16 ++++++++--------
+ 3 files changed, 11 insertions(+), 8 deletions(-)
+
+diff --git a/Makefile.tpl b/Makefile.tpl
+index 66c012371..e54fad65d 100644
+--- a/Makefile.tpl
++++ b/Makefile.tpl
+@@ -609,6 +609,7 @@ COMPILER_AS_FOR_TARGET=@COMPILER_AS_FOR_TARGET@
+ COMPILER_LD_FOR_TARGET=@COMPILER_LD_FOR_TARGET@
+ COMPILER_NM_FOR_TARGET=@COMPILER_NM_FOR_TARGET@
+ 
++CPPFLAGS_FOR_TARGET = @CPPFLAGS_FOR_TARGET@
+ CFLAGS_FOR_TARGET = @CFLAGS_FOR_TARGET@
+ CXXFLAGS_FOR_TARGET = @CXXFLAGS_FOR_TARGET@
+ 
+diff --git a/configure.ac b/configure.ac
+index e1a0a797b..36ae1e320 100644
+--- a/configure.ac
++++ b/configure.ac
+@@ -2538,6 +2538,8 @@ AC_ARG_WITH([debug-prefix-map],
+   [DEBUG_PREFIX_CFLAGS_FOR_TARGET=])
+ AC_SUBST(DEBUG_PREFIX_CFLAGS_FOR_TARGET)
+ 
++AC_SUBST(CPPFLAGS_FOR_TARGET)
++
+ # During gcc bootstrap, if we use some random cc for stage1 then CFLAGS
+ # might be empty or "-g".  We don't require a C++ compiler, so CXXFLAGS
+ # might also be empty (or "-g", if a non-GCC C++ compiler is in the path).
+diff --git a/libstdc++-v3/acinclude.m4 b/libstdc++-v3/acinclude.m4
+index e3cc3a8e8..ed9b41d1b 100644
+--- a/libstdc++-v3/acinclude.m4
++++ b/libstdc++-v3/acinclude.m4
+@@ -1063,17 +1063,17 @@ AC_DEFUN([GLIBCXX_ENABLE_C99], [
+     fi
+ 
+     # Option parsed, now set things appropriately.
+-    if test x"$glibcxx_cv_c99_math_cxx98" = x"no" ||
+-       test x"$glibcxx_cv_c99_complex_cxx98" = x"no" ||
+-       test x"$glibcxx_cv_c99_stdio_cxx98" = x"no" ||
+-       test x"$glibcxx_cv_c99_stdlib_cxx98" = x"no" ||
+-       test x"$glibcxx_cv_c99_wchar_cxx98" = x"no"; then
+-      enable_c99=no;
+-    else
++#    if test x"$glibcxx_cv_c99_math_cxx98" = x"no" ||
++#       test x"$glibcxx_cv_c99_complex_cxx98" = x"no" ||
++#       test x"$glibcxx_cv_c99_stdio_cxx98" = x"no" ||
++#       test x"$glibcxx_cv_c99_stdlib_cxx98" = x"no" ||
++#       test x"$glibcxx_cv_c99_wchar_cxx98" = x"no"; then
++#      enable_c99=no;
++#    else
+       AC_DEFINE(_GLIBCXX_USE_C99, 1,
+         [Define if C99 functions or macros from <wchar.h>, <math.h>,
+         <complex.h>, <stdio.h>, and <stdlib.h> can be used or exposed.])
+-    fi
++#    fi
+ 
+     gcc_no_link="$ac_save_gcc_no_link"
+     LIBS="$ac_save_LIBS"
diff --git a/repos/ports/src/noux-pkg/gcc/target.inc b/repos/ports/src/noux-pkg/gcc/target.inc
index db827437e2..4bd904e95a 100644
--- a/repos/ports/src/noux-pkg/gcc/target.inc
+++ b/repos/ports/src/noux-pkg/gcc/target.inc
@@ -11,12 +11,12 @@ CONFIGURE_ARGS = --program-prefix=$(PROGRAM_PREFIX) \
                  --disable-libquadmath \
                  --disable-libffi \
                  --disable-libada \
+                 --disable-gcov \
                  --enable-targets=all \
                  --with-gnu-as \
                  --with-gnu-ld \
                  --disable-tls \
                  --disable-threads \
-                 --disable-hosted-libstdcxx \
                  --disable-c++-tools \
                  --enable-shared \
                  --enable-multiarch \
@@ -32,6 +32,8 @@ MKENV += CC_FOR_TARGET=$(CC) CXX_FOR_TARGET=$(CXX) GCC_FOR_TARGET=$(CC) CPP_FOR_
 # libgcc does not evaluate CPPFLAGS_FOR_TARGET, so everything is put into CFLAGS_FOR_TARGET here
 MKENV += CFLAGS_FOR_TARGET='-I$(BASE_DIR)/../../tool -DUSE_PT_GNU_EH_FRAME -Dinhibit_libc -fPIC'
 
+MKENV += CPPFLAGS_FOR_TARGET='$(CPPFLAGS)'
+
 # libsupc++
 MKENV += CXXFLAGS_FOR_TARGET='-fPIC'
 
